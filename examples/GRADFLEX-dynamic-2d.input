// Solves fluct NS equation for velocity first over one time step for u:
// du/dt + grad(pi) + u*grad(u) = eta*Lap(u) + stoch - gamma*c*g_hat
// div(u) = 0
// where gamma is a gravity-like constant, and g_hat=(0,1) in 2D and (0,0,1) in 3D.
// After velocity solver completes we then solve
// dc/dt + u*grad(c) + div(u_s*c) = kappa*Lap(c) + stoch
// where u_s is an analytically-prescribed 'Soret' advection field
// The div(u_s*c) term is handled implicitly, while u*grad(c) is handled explicitly

SEED = 0                             // RNG seed (zero for clock)

// Units are:
// Length=cm, Time=s, Temperature=K, mass=gr

// System size:
//----------------
LY = 0.1                            // Height of box
THICKNESS = 1E-3                    // Thickness of sample in z direction (in 2D)
ASPECT = 4                          // Aspect ratio (length/height)

// Discretization parameters:
//----------------
PERIODIC = 0 // Is y axes periodic
NY = 64                              // Grid size y axis
CFL = 1.0 // Diffusive CFL number (determines time step)

N_STEPS = 1001                       // Number of time steps
N_STEPS_POST = 1                    // How often to do HydroGrid analysis
N_STEPS_SNAPSHOT = 0             // How often to write out HydroGrid results
N_STEPS_SKIP =    100                // How many steps to skip initially
N_STEPS_CHECK = 10                  // How often to print statistics
PROJECT_Y = FALSE                    // Analyze projection along y
N_STEPS_DUMP = 0 // How often IBAMR dumps hydrodynamic variables to disk

// physical parameters
//----------------

C_AV = 0.018 // Average concentration
C_VAR = 0 // Scale for equilibrium concentration fluctuations

NU = 6.07E-3 // Kinematic viscosity
KAPPA = 1.97E-6 // Diffusion coefficient

kT = 4.1828e-14  // Temperature
RHO = 0.858 // Density
MOLMASS = 1.511e-20 // Molecular mass

SORET = 0.06486 // Soret coefficient
DTEMP = 17.4 // Temperature differential, deltaT=17.4, 8.70, or 4.35, or 1E-9 for zero

EXPANSION = 0.553 // Solutal expansion coefficient beta
GRAVITY = 1E2 // 9.81E2 // Gravitational constant

// Form of the equations being solved:
//----------------
CREEPING_FLOW = TRUE                // Exclude v*grad(v) term?
INCLUDE_CONCENTRATION = TRUE         // Include c?
INCLUDE_CONVECTIVE_TRANSPORT = TRUE  // Include v*grad(c) term?
INCLUDE_SORET_TRANSPORT = TRUE      // Include v_s*grad(c) term?
STOCH_FORCING_C = "C*(1-C)"          // Form of the concentration stochastic forcing concentration-dependent prefactor
INCLUDE_BOUSSINESQ_FORCING = TRUE   // Include gravity f = -gamma*c in momentum equation?

// Derived quantities:
//----------------
DZ = THICKNESS // In 2D

MU = RHO*NU // Shear viscosity
BOUSSINESQ_FORCING_GAMMA = RHO*EXPANSION*GRAVITY

// Fluctuation magnitude (standard deviation relative to physical):
STD_U = sqrt(kT / DZ) // Velocities  = sqrt(k_B*T/dz)
STD_C = sqrt(C_VAR*MOLMASS / RHO / DZ) // Concentration = sqrt(M/rho/dz)
VARIANCE = 1.0 // Extra scaling of spectra in HydroGrid

// Box size:
LX = ASPECT*LY
NX = ASPECT*NY
DX=LX/NX
DY=LY/NY

// Time step (kept constant)
DT = CFL*DY^2 / KAPPA

// Boundary conditions at top/bottom walls
//----------------
// Used for initialization even if periodic in y
V_BOTTOM=0
V_TOP=0
C_BOTTOM=1
C_TOP=0

// Soret stuff:
GRADT =  (1-PERIODIC) * DTEMP  / (NY*DY) // Temperature gradient
SGTL = SORET*GRADT*NY*DY
C_AV_COEFF = ( PERIODIC==1 ? 1.0 : SGTL / (1-exp(-SGTL)))
U_SORET = -KAPPA*SORET*GRADT

//---------------------------------------------------------

Main {
// log file parameters
   log_file_name    = "GRADFLEX-dynamic-2d.log"
   log_all_nodes    = FALSE
   nml_file = "examples/GRADFLEX-dynamic-2d.nml"

// visualization dump parameters
   viz_writer            = "VisIt"
   viz_dump_interval     = N_STEPS_DUMP           // zero to turn off
   viz_dump_dirname      = "VisitIBAMR"
   visit_number_procs_per_file = 1

// restart dump parameters
   restart_interval      = 0            // zero to turn off
   restart_write_dirname = "RestartIBAMR"

// timer dump parameters
   timer_dump_interval   = 0            // zero to turn off

// postprocessing (HydroGridAnalysis) parameters
   postprocess_interval = N_STEPS_POST  // zero to turn off
   snapshot_interval = N_STEPS_SNAPSHOT // How many time steps to average statistics over
   iteration_skip = N_STEPS_SKIP        // How many steps to skip in the beginning
   check_interval = N_STEPS_CHECK       // How often to print some expectation values
   project_y_axis = PROJECT_Y           // Also analyze projection (average) along y
}

CartesianGeometry {
   domain_boxes = [ (0, 0) , (NX - 1, NY - 1) ]
   x_lo         =  0   , 0              // lower end of computational domain.
   x_up         =  LX, LY           // upper end of computational domain.
   periodic_dimension = 1, PERIODIC
}

//---------------------------------------------------------
// Initial conditions

// Linear velocity profile along y (shear):
VelocityInitialConditions {
   n = NY
   v1 = V_TOP
   v0 = V_BOTTOM
   function_0 = "v0 + (v1-v0)*X_1/n"
   function_1 = "0.0"
}

ConcentrationInitialConditions {
   n = NY
   dy = DY
   c1 = C_TOP
   c0 = C_BOTTOM
   c_av = C_AV
   c_av_coeff = C_AV_COEFF
   SGT = SORET*GRADT
   periodic = PERIODIC
   
   width = 1.0 // Initial width of interface
   
   // Constant profile:
   //function = "c_av"
   
   // Linear profile:
   //function = "c0 + (c1-c0)*X_1/(n*dy)"

   // Phase-separated tanh profile:
   //function = "c0 + (c1-c0)/2*(1+tanh((X_1-(n*dy/2))/(width*dy)))"  // half-half
   //function = "c0 + (c1-c0)/2*( tanh((X_1-(n*dy/3))/(width*dy)) - tanh((X_1-(2*n*dy/3))/(width*dy)) )" // stripe along middle

   // Exponential profile for Soret-induced gradient:
   function = " c_av * c_av_coeff * exp(-SGT*X_1)"
   // Empirical addition for NY=32: (1.3687e-06 - 4.1884e-05 * X_1 + 0.00022096 * X_1^2)
}

PressureInitialConditions {
   function = "0"
}

//---------------------------------------------------------
// Additional terms in equation:

// Soret velocity u_s is constant here
SoretVelocityFunction {
   u_soret = U_SORET
   function_0 = "0.0"
   function_1 = "u_soret"
}

ForcingFunction { // Additional forcing in concentration equation
   function_0 = "0.0"
}

// Algorithmic controls
//----------------

// The advection-diffusion concentration solver and the Navier-Stokes solver are completely separate
// Notably, they can use different number of cycles.

// The options for viscous and diffusive time_stepping are:
// "FORWARD_EULER" or "BACKWARD_EULER" for num_cycles=1
// "TRAPEZOIDAL_RULE"="CRANK_NICOLSON" for num_cycles=1 or 2
// Options for advective time stepping:
// "ADAMS_BASHFORTH", "FORWARD_EULER" for num_cycles=1 or 2
// "TRAPEZOIDAL_RULE" or "MIDPOINT_RULE" for num_cycles=2
// The Soret advective term div(u_s*c) timestepping can be:
// "FORWARD_EULER", "BACKWARD_EULER", "TRAPEZOIDAL_RULE" (midpoint not presently supported for num_cycles>1)

SORET_TIME_STEPPING_TYPE = "TRAPEZOIDAL_RULE"
SORET_CONVECTIVE_OP = "CENTERED"
SORET_DIFFERENCE_FORM = "CONSERVATIVE" // div(u_s*c)
// For overdamped dynamics this needs to be false:
CENTER_U_ADV_DIFF = FALSE

INSStaggeredHierarchyIntegrator {
   num_cycles           = 1
   viscous_time_stepping_type    = "BACKWARD_EULER" // "TRAPEZOIDAL_RULE"
   convective_time_stepping_type = "FORWARD_EULER"
   convective_op_type            = "CENTERED"
   convective_difference_form    = "CONSERVATIVE"
   init_convective_time_stepping_type = "EULER"

   //rho                  = RHO // Time-dependent case
   rho                  = 0 // Steady Stokes case

   mu                   = MU
   creeping_flow        = CREEPING_FLOW
   normalize_pressure   = TRUE // Must be set to FALSE for normal stress BCs!
   normalize_velocity   = (PERIODIC==1) // Must be set to true for periodic BCs
   start_time           = 0.0e0
   end_time             = (N_STEPS+N_STEPS_SKIP)*DT
   cfl                  = 100
   dt_max               = DT
   grow_dt              = 1.0e0
   max_integrator_steps = 10000000
   regrid_interval      = 10000000
   enable_logging       = FALSE
   output_U             = TRUE
   output_P             = FALSE
   output_F             = FALSE
   output_Q             = FALSE
   output_Omega         = FALSE
   output_Div_U         = FALSE
   
   // Krylov Stokes solver controls (optimized for steady Stokes flow):
   // -------------------------------
   // max_iterations   = maximum number of solver/preconditioner
   //                    iterations per solve; actual number of
   //                    iterations may be less
   // rel_residual_tol = stop when |r_k| < tol*|b|; unless modified to
   //                    stop when |r_k| < tol*min(|b|,|r_0|)
   // abs_residual_tol = stop when |r_k| < tol
   //
   // NOTE: PETSc solvers are all configurable at the command line; run
   //       with -help to see list of all options.  Command line options
   //       should take precedence over options set in this input file
   //       (if they don't, this is a bug that should be reported).

   stokes_solver_type = "PETSC_KRYLOV_SOLVER"
   stokes_solver_db {
      ksp_type = "gmres"  // "gmres", "fgmres" or "richardson"
      max_iterations = 50
      rel_residual_tol = 1.0e-9
      abs_residual_tol = 0.0
   }

   stokes_precond_type = "PROJECTION_PRECONDITIONER"
   stokes_precond_db {
      // no options to set for projection preconditioner
   }
   
   velocity_solver_type = "HYPRE_LEVEL_SOLVER"
   // Pure geometric MG (buggy for more then one V-cycle!)
   velocity_solver_db {
      solver_type       = "Split" // Split vx / vy / vz blocks
      split_solver_type = "PFMG" // Use hypre PFMG MG on the blocks
      enable_logging    = FALSE
      max_iterations    = 1 // Only works with a single multigrid cycle per iteration
      rel_residual_tol  = 1.0e-16
      abs_residual_tol     = 0
   }

   pressure_solver_type = "HYPRE_LEVEL_SOLVER"
   pressure_solver_db {
      solver_type          = "PFMG"
      num_pre_relax_steps  = 2
      num_post_relax_steps = 2
      enable_logging       = FALSE
      max_iterations       = 1 // Only a single multigrid cycle per iteration
      rel_residual_tol     = 1.0e-16
      abs_residual_tol     = 0
   }  
   
}

// For trapezoidal method:
INSStaggeredStochasticForcing {
   stress_tensor_type = "SYMMETRIC"
      // options are: "UNCORRELATED", "SYMMETRIC", and "SYMMETRIC_TRACELESS"
   velocity_bc_scaling = sqrt(2.0)
   traction_bc_scaling = 0.0
   std = STD_U

   // For trapezoidal:
   num_rand_vals = 1
   weights_0 = 1
   weights_1 = 1
}

AdvDiffSemiImplicitHierarchyIntegrator {
   diffusion_time_stepping_type  = SORET_TIME_STEPPING_TYPE
   convective_time_stepping_type = "TRAPEZOIDAL_RULE"
   convective_op_type            = "CENTERED"
   convective_difference_form    = "CONSERVATIVE"
   convective_op_db {
      outflow_bdry_extrap_type = "NONE" // Outflow boundary handling: "NONE", "CONSTANT", "LINEAR", or "QUADRATIC"
   }
   init_convective_time_stepping_type = "FORWARD_EULER" // For Adams-Bashforth

   num_cycles           = 2
   start_time           = 0.0e0
   end_time             = (N_STEPS+N_STEPS_SKIP)*DT
   cfl                  = 10
   dt_max               = DT
   grow_dt              = 1.0e0
   max_integrator_steps = 10000000
   regrid_interval      = 10000000
   enable_logging       = FALSE

   helmholtz_solver_type = "PETSC_KRYLOV_SOLVER"
   helmholtz_solver_db {
      ksp_type = "gmres"
      max_iterations = 100      
   }

   helmholtz_precond_type = "HYPRE_LEVEL_SOLVER"
   helmholtz_precond_db {
      solver_type          = "PFMG"
      num_pre_relax_steps  = 2
      num_post_relax_steps = 2
      enable_logging       = FALSE
      max_iterations       = 1
      rel_residual_tol     = 1.0e-6
      abs_residual_tol     = 0
   }
}

// Note: The multiplicative stochastic forcing for concentration is handled in the corrector step as:
//  f(C(n))                   for FORWARD_EULER
//  f(0.5*C(n)+0.5*C(n+1)))   for MIDPOINT_RULE
//  0.5*(f(C(n))+f(C(n+1)))   for TRAPEZOIDAL_RULE
// This is not formally even first order accurate for truly multiplicative noise

// For trapezoidal:
AdvDiffStochasticForcing {
   f_expression = STOCH_FORCING_C // Amplitude of stochastic forcing
   dirichlet_bc_scaling = sqrt(2.0)
   neumann_bc_scaling = 0.0
   std = STD_C
   // For trapezoidal:
   num_rand_vals = 1
   weights_0 = 1
   weights_1 = 1
}

//---------------------------------------------------------
// Boundary conditions are specified using coefficients
// a, b and g at each non-periodic boundary.
// a*u + b*(du/dn) = g
// Here the normal vector goes into the boundary (away from the interior)
// e.g., at the lower y boundary n=(0 -1 0),
// a*u - b*du/dy = g
// but at the upper y boundary n=(0 1 0),
// a*u + b*du/dy = g
// The coefficients can be functions of space and time in general

// The boundaries are ordered as:
// 0 = x lower, 1 = x upper
// 2 = y lower, 3 = y upper
// 4 = z lower, 5 = z upper

// The normal vector goes into the boundary (away from the interior)
// e.g., at the lower y boundary n=(0 -1 0),
// but at the upper y boundary n=(0 1 0),
//---------------------------------------------------------

//---------------------------------------------------------
// Two types of boundary conditions are supported for N-S solver
// Either "velocity" or "traction" can be specified at the boundary:
//   a = 1 , b = 0 ===> u[d] = g
//   a = 0 , b = 1 ===> t[d] = g
//   any other combination of a and b = error
//   Here d is the component and
//   t = sigma*n is the traction vector at the boundary
//   where stress tensor sigma = -p*I+mu*(grad(u)+grad^T(u))

//   Only two BCs work with fluctuations for now
//   because only Dirichlet BCs for normal velocity are handled:
//   1. Stick or No-Slip walls: Normal and tangential velocity are constant
//   2. Slip walls: Normal velocity is constant and the tangential traction is zero
//   Since t_tan = mu*du_tan/dn = 0 this implies Neumann for tangential velocity

VelocityBcCoefs_0 { // Stick walls (vx)
   v1 = V_TOP
   v0 = V_BOTTOM

   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "v0"
   gcoef_function_3 = "v1"
}

VelocityBcCoefs_1 { // Stick walls (vy)
   acoef_function_0 = "1.0"
   acoef_function_1 = "1.0"
   acoef_function_2 = "1.0"
   acoef_function_3 = "1.0"

   bcoef_function_0 = "0.0"
   bcoef_function_1 = "0.0"
   bcoef_function_2 = "0.0"
   bcoef_function_3 = "0.0"

   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"
   gcoef_function_2 = "0.0"
   gcoef_function_3 = "0.0"
}

//---------------------------------------------------------

// NOTE: BCs for concentration are specified in the mixed Neumman-Dirichlet (Robin) form:
// a*c + b*(du/dn) = g
// a*c - b*du/dy = g
// a*c + b*du/dy = g

ConcentrationBcCoefs { // Robin BCs
   AY = SORET*GRADT

   // x-axis
   acoef_function_0 = "0.0"
   acoef_function_1 = "0.0"
   bcoef_function_0 = "1.0"
   bcoef_function_1 = "1.0"
   gcoef_function_0 = "0.0"
   gcoef_function_1 = "0.0"

   // y-axis Neumann
   acoef_function_2 = "-AY"
   acoef_function_3 = "AY"
   bcoef_function_2 = "1.0"
   bcoef_function_3 = "1.0"
   gcoef_function_2 = "0"
   gcoef_function_3 = "0"
}

//---------------------------------------------------------
// Parallelization/gridding details

GriddingAlgorithm {
   max_levels = 1

   largest_patch_size {
      level_0 = 512, 512
   }

   smallest_patch_size {
      level_0 = 4,  4
   }
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}

LoadBalancer {
   bin_pack_method     = "SPATIAL"
   max_workload_factor = 1
}

TimerManager{
   print_exclusive = FALSE
   print_total = TRUE
   print_threshold = 0.1

   timer_list = "IBAMR::*::*" , "IBTK::*::*" , "*::*::*"
}



